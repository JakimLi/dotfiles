" Auto Install Plug {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !mkdir -p ~/.vim/autoload
  silent !curl -fLo ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
" }}}


call plug#begin('~/.vim/bundle')

" Appearance {{{
Plug 'w0ng/vim-hybrid'
" Plug 'croaky/vim-colors-github'
Plug 'saaguero/vim-github-colorscheme'
Plug 'junegunn/indentLine'
    let g:indentLine_char = '┊'
    let g:indentLine_color_term = 239

Plug 'bling/vim-airline'
    let g:airline_theme='light'
    let g:airline_enable_fugitive=1
    let g:airline_enable_syntastic=0

    " modify airline symbols
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '»'
    let g:airline_left_sep = '▶'
    let g:airline_right_sep = '«'
    let g:airline_right_sep = '◀'
    let g:airline_symbols.linenr = '␊'
    let g:airline_symbols.linenr = '␤'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.paste = 'Þ'
    let g:airline_symbols.paste = '∥'
    let g:airline_symbols.whitespace = 'Ξ'
    " let g:airline_symbols.whitespace = '☯'
    " shorter mode names
    let g:airline_mode_map = {
        \ '__' : '-',
        \ 'n'  : 'N',
        \ 'i'  : 'I',
        \ 'R'  : 'R',
        \ 'c'  : 'C',
        \ 'v'  : 'V',
        \ 'V'  : 'V',
        \ '' : 'V',
        \ 's'  : 'S',
        \ 'S'  : 'S',
        \ '' : 'S',
        \ }
    " control which sections get truncated and at what width. >
    let g:airline#extensions#default#section_truncate_width = {
        \   'b': 79,
        \   'x': 60,
        \   'y': 88,
        \   'z': 45,
        \ }
    " disable summary of changed hunks under source control.
    let g:airline#extensions#hunks#enabled = 0
    " enable enhanced tabline.
    " let g:airline#extensions#tabline#enabled = 1
    " let g:airline#extensions#tabline#show_buffers = 0
    " display tab number instead of # of splits (default)
    " let g:airline#extensions#tabline#tab_nr_type = 1
    " define how file names are displayed in tabline
    " let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    " no default separators for the tabline
    " let g:airline#extensions#tabline#left_sep = ''
    " let g:airline#extensions#tabline#left_alt_sep = ''
    " let g:airline#extensions#tabline#right_sep = ''
    " let g:airline#extensions#tabline#right_alt_sep = ''
" }}}

" Core {{{
Plug 'ctrlpvim/ctrlp.vim'
    " let g:ctrlp_match_window = 'bottom,order:btt,min:20,max:20,results:20'
    let g:ctrlp_working_path_mode = 0
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/](\.git|\.hg|\.svn)$',
        \ 'file': '\.pyc$\|\.pyo$',
        \ }
    let g:ctrlp_open_multiple_files = '1jr'
    let g:ctrlp_max_files = 0
    let g:ctrlp_lazy_update = 50
    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
Plug 'felikz/ctrlp-py-matcher'

" Plug 'bling/vim-bufferline'
Plug 'bufkill.vim'
Plug 'matchit.zip'
Plug 'tComment'
Plug 'jiangmiao/auto-pairs'

Plug 'vim-scripts/YankRing.vim'
    let g:yankring_history_dir = '~/.vim/tmp'
    let g:yankring_replace_n_pkey = '<leader>['
    let g:yankring_replace_n_nkey = '<leader>]'

Plug 'kristijanhusak/vim-multiple-cursors'
    " Disable NeoComplete once start selecting multiple cursors
    function! Multiple_cursors_before()
        if exists(':NeoCompleteLock') == 2
            exe 'NeoCompleteLock'
        endif
    endfunction
    " Re-enable NeoComplete when the multiple selection is canceled
    function! Multiple_cursors_after()
        if exists(':NeoCompleteUnlock') == 2
            exe 'NeoCompleteUnlock'
        endif
    endfunction

Plug 'junegunn/vim-easy-align'
	" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
	xmap <CR>      <Plug>(EasyAlign)

Plug 'Lokaltog/vim-easymotion'
    " easymotion prefix
    map ,      <Plug>(easymotion-prefix)
    " not case censitive
    let g:EasyMotion_smartcase = 1

Plug 'justinmk/vim-gtfo'
Plug 'scrooloose/nerdtree'
    " Make it colourful and pretty
    let NERDChristmasTree = 1
    " Size of the NERD tree
    let NERDTreeWinSize = 29
    " Disable 'bookmarks' and 'help'
    let NERDTreeMinimalUI = 1
    " Show hidden files
    let NERDTreeShowHidden = 1
    " Highlight the selected entry in the tree
    let NERDTreeHighlightCursorline = 1
    " Use a single click to fold/unfold directories
    let NERDTreeMouseMode = 2
    " Don't display these kinds of files in NERDTree
    let NERDTreeIgnore = [
        \ '\~$', '\.pyc$', '\.pyo$', '\.class$', '\.aps',
        \ '\.git', '\.hg', '\.svn', '\.sass-cache',
        \ '\.coverage$', '\.tmp$', '\.gitkeep$',
        \ '\.vcxproj', '\.bundle', '\.DS_Store$', '\tags$']
Plug 'jistr/vim-nerdtree-tabs'
    map <F3> <Plug>NERDTreeTabsToggle<CR>
    " Do not open NERDTree on startup
    let g:nerdtree_tabs_open_on_gui_startup = 0

Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
    let g:NumberToggleTrigger="@"

" Tmux
Plug 'tpope/vim-tbone'
Plug 'tpope/vim-dispatch'

" }}}

" Programming {{{
Plug 'scrooloose/syntastic'
    " let g:syntastic_check_on_open=1
    " let g:syntastic_enable_signs=1
    let g:syntastic_enable_highlighting = 0
    let g:syntastic_phpcs_conf = "--tab-width=4 --standard=PSR2"

    " manual syntastic check
    nnoremap <silent> <F7> :SyntasticCheck<CR>
    " fancy symbols
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol = '‽'
    let g:syntastic_style_error_symbol = '❄'
    let g:syntastic_style_warning_symbol = '❖'
    " error window will be automatically closed
    " let g:syntastic_auto_loc_list = 1
    " populate syntastic errors in location list
    " let g:syntastic_always_populate_loc_list = 1
    " height of the location lists that syntastic opens
    let g:syntastic_loc_list_height = 5
    " automatic syntax checking
    let g:syntastic_mode_map = {
        \ 'mode': 'active',
        \ 'active_filetypes': ['php', 'javascript', 'ruby', 'coffee'],
        \ 'passive_filetypes': ['html', 'css', 'scss'] }

Plug 'zhuochun/vim-dicts'
Plug 'Shougo/neosnippet-snippets'
Plug 'Shougo/neosnippet.vim'
    " Remove snippet markers after save
    autocmd! BufWrite * NeoSnippetClearMarkers

    " Plugin key-mappings
    imap <C-j>     <Plug>(neosnippet_expand_or_jump)
    smap <C-j>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-j>     <Plug>(neosnippet_expand_target)
Plug 'Shougo/neocomplete.vim'
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_camel_case = 1
    let g:neocomplete#enable_auto_delimiter = 1
    let g:neocomplete#enable_fuzzy_completion = 1

    let g:neocomplete#max_list = 30
    let g:neocomplete#auto_completion_start_length = 3
    let g:neocomplete#manual_completion_start_length = 3
    let g:neocomplete#sources#buffer#disabled_pattern = '\.log\|\.log\.\|\.jax'
    let g:neocomplete#lock_buffer_name_pattern = '\.log\|\.log\.\|.*quickrun.*\|.jax'

    " Define dictionary
    let g:neocomplete#sources#dictionary#dictionaries = {
        \   'default'    : '',
        \   'ruby'       : $HOME.'/.vim/bundle/vim-dicts/dict/ruby.dict',
        \   'coffee'     : $HOME.'/.vim/bundle/vim-dicts/dict/node.dict',
        \ }

    " Define keyword
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns._ = '\h\w*'

    " Enable heavy omni completion
    let g:neocomplete#force_overwrite_completefunc = 1
    if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
    endif
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    if !exists('g:neocomplete#sources#omni#functions')
        let g:neocomplete#sources#omni#functions = {}
    endif

    " Plugin key-mappings
    inoremap <expr><C-g> pumvisible() ? neocomplete#undo_completion() : "<ESC>"
    inoremap <expr><C-l> neocomplete#complete_common_string()

    " <CR> close popup and save indent
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
        function! s:my_cr_function()
            return pumvisible() ? neocomplete#close_popup() : "\<CR>"
        endfunction

    " <TAB> completion
    inoremap <silent><expr><TAB> pumvisible() ? "\<C-n>" :
                               \ <SID>check_back_space() ? "\<TAB>" :
                               \ neocomplete#start_manual_complete()
        function! s:check_back_space()
            let col = col('.') - 1
            return !col || getline('.')[col - 1] =~ '\s'
        endfunction
    " <S-TAB> completion backward
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-H>"
    " <BS> close popup and delete backword char
    inoremap <expr><BS> pumvisible() ?
                \ neocomplete#smart_close_popup()."\<C-H>" :
                \ AutoPairsDelete()
    " <Space> close popup
    inoremap <expr><Space> pumvisible() ?
                \ neocomplete#close_popup()."\<Space>" : "\<Space>"

" }}}

" Text Objects {{{
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'               " al | il
Plug 'kana/vim-textobj-syntax'             " ay | iy
Plug 'kana/vim-textobj-indent'             " ai | ii
Plug 'kana/vim-textobj-lastpat'            " a/ | i/
Plug 'nelstrom/vim-textobj-rubyblock'      " ar | ir
Plug 'osyo-manga/vim-textobj-multiblock'   " ab | ib
Plug 'idbrii/textobj-word-column.vim'      " ac | ic
Plug 'Julian/vim-textobj-variable-segment' " av | iv
Plug 'bootleq/vim-textobj-rubysymbol'
" }}}

" HTML/XML {{{
Plug 'othree/html5.vim'
Plug 'gregsexton/MatchTag'
Plug 'mattn/emmet-vim'
    " enable emment functions in insert mode
    let g:user_emmet_mode = 'i'
" }}}

" Template Engines {{{
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }
Plug 'slim-template/vim-slim', { 'for': 'slim' }
Plug 'tpope/vim-haml', { 'for': 'haml' }
" }}}

" CSS {{{
Plug 'gorodinskiy/vim-coloresque', { 'for': ['css', 'scss', 'less'] }
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'scss', 'less'] }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'wavded/vim-stylus', { 'for': 'styl' }
" }}}

" JavaScript {{{
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'moll/vim-node'
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
Plug 'othree/javascript-libraries-syntax.vim'
    let g:used_javascript_libs =
        \ 'jquery,underscore,backbone,angularjs,angularui,jasmine'
" }}}

" PHP/Laravel {{{
Plug 'StanAngeloff/php.vim'
Plug 'xsbeats/vim-blade', { 'for': 'blade' }
Plug 'markwu/vim-laravel4-snippets'
" Plug 'adoy/vim-php-refactoring-toolbox'
" }}}

" Ruby/Rails {{{
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rbenv'
Plug 'Keithbsmiley/rspec.vim', { 'for': 'ruby' }
Plug 'ecomba/vim-ruby-refactoring', { 'for': 'ruby' }
Plug 'skalnik/vim-vroom'
    let g:vroom_use_dispatch = 1
" }}}

" Git {{{
Plug 'mhinz/vim-signify'
    let g:signify_vcs_list = ['git', 'hg']
Plug 'tpope/vim-fugitive'
Plug 'gregsexton/gitv', { 'on': 'Gitv' }
    nnoremap <leader>gv :Gitv<CR>
    nnoremap <leader>gc :Gcommit -v<CR>
    nnoremap <Leader>gs :Gstatus<CR>
    nnoremap <Leader>gd :Gdiff<CR>
    nnoremap <Leader>gb :Gblame<CR>
    nnoremap <Leader>gl :exe ':!cd ' . expand('%:p:h') . '; git lg'<CR>
    nnoremap <Leader>gh :Silent Glog<CR>
    nnoremap <Leader>gH :Silent Glog<CR>:set nofoldenable<CR>
    nnoremap <Leader>gr :Gread<CR>
    nnoremap <Leader>gw :Gwrite<CR>
    nnoremap <Leader>gp :Git push<CR>
    nnoremap <Leader>g- :Silent Git stash<CR>:e<CR>
    nnoremap <Leader>g+ :Silent Git stash pop<CR>:e<CR>
" }}}

" Markdown {{{
Plug 'plasticboy/vim-markdown'
" Plug 'gabrielelana/vim-markdown'
"     let g:markdown_enable_mappings = 0
Plug 'junegunn/goyo.vim',      { 'on': 'Goyo' }
Plug 'junegunn/limelight.vim', { 'on': 'Limelight' }
" }}}


call plug#end()
